// Code generated by go-bindata.
// sources:
// query.graphql
// schema.graphql
// type/cmt_product.graphql
// type/cmt_variant.graphql
// type/customer_order.graphql
// type/vendor_order.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xc1\xca\xc2\x30\x0c\x80\xcf\xcb\x53\x64\xb7\xfd\xf0\x3f\x41\xaf\xee\xe2\x41\xa7\xe8\x4d\x3c\xd4\x35\x8c\x22\x6d\x25\x4d\x84\x31\xf6\xee\xe2\x14\xb1\x5e\x93\x2f\x5f\x3e\x19\x6f\x84\x7b\x25\x1e\x71\x82\xaa\xd7\x2c\x29\x10\x77\xec\x88\xb3\xc1\xd3\xea\x7b\x50\x9f\x7f\x88\x26\x6a\xb8\x10\x1b\x3c\x08\xfb\x38\xd4\x7f\x06\xcb\x03\xa8\x06\x92\x1d\x27\xa7\xbd\xb4\x56\x6c\x17\x72\xe3\x9d\xc1\x75\x94\x27\xfc\xde\xd4\x30\x03\xc0\x52\xb2\x51\xb1\xe2\x53\x9c\xa0\xca\x24\xad\xd2\xd1\x07\x6a\xee\x29\x45\x7f\x5d\x94\xdb\xf2\xe3\x3f\xba\x17\xf3\x71\x16\x01\x30\x3f\x02\x00\x00\xff\xff\xc6\x40\x9b\x9a\xe0\x00\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 224, mode: os.FileMode(420), modTime: time.Unix(1592479635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x20\x00\x00\xff\xff\x12\xc4\x2a\x24\x2e\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 46, mode: os.FileMode(420), modTime: time.Unix(1592479635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCmt_productGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x28\xca\x4f\x29\x4d\x2e\x51\xa8\xe6\x52\x50\x50\x50\xc8\x4b\xcc\x4d\xb5\x52\x08\x2e\x29\xca\xcc\x4b\x57\x04\x8b\x14\xe7\x94\xa6\xa3\x8a\x24\xe7\x97\xe6\x95\xc4\xe7\xe7\xc5\x67\x24\xe6\xa5\xa0\x29\x4e\xcd\xc9\x49\x2d\x8a\x4f\xce\x4f\x41\x33\x25\x39\xb1\x24\x35\x3d\xbf\xa8\x32\x1e\x62\x41\x34\x54\x2e\x16\x22\x1b\x96\x58\x94\x99\x98\x57\x52\x6c\xa5\x10\x0d\x65\x82\x64\x6a\x01\x01\x00\x00\xff\xff\xb2\x1e\x19\x03\xa0\x00\x00\x00")

func typeCmt_productGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCmt_productGraphql,
		"type/cmt_product.graphql",
	)
}

func typeCmt_productGraphql() (*asset, error) {
	bytes, err := typeCmt_productGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/cmt_product.graphql", size: 160, mode: os.FileMode(420), modTime: time.Unix(1592479635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCmt_variantGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x4b\x2c\xca\x4c\xcc\x2b\x51\xa8\xe6\x52\x50\x50\x50\x28\xce\x2e\xb5\x52\x08\x2e\x29\xca\xcc\x4b\x57\x04\x0b\x14\x14\xe5\xa7\x94\x26\x97\xc4\x67\xa6\x58\x29\x78\xe6\x95\x40\x04\x93\xf3\x4b\xf3\x4a\xe2\xf3\xf3\xe2\x33\x12\xf3\x90\xc5\x8b\x33\xab\x52\xe3\x8b\x4b\x8a\x10\x46\xd4\x02\x02\x00\x00\xff\xff\x83\x6e\x48\x13\x64\x00\x00\x00")

func typeCmt_variantGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCmt_variantGraphql,
		"type/cmt_variant.graphql",
	)
}

func typeCmt_variantGraphql() (*asset, error) {
	bytes, err := typeCmt_variantGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/cmt_variant.graphql", size: 100, mode: os.FileMode(420), modTime: time.Unix(1592479635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCustomer_orderGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2e\x2d\x2e\xc9\xcf\x4d\x2d\xf2\x2f\x4a\x49\x2d\x52\xa8\xe6\xe2\xcc\x2b\xcd\x4d\x4a\x2d\xb2\x52\x08\x2e\x29\xca\xcc\x4b\x57\xe4\xe2\x0c\x4b\xcd\x4b\xc9\x87\xc8\x17\x5b\x29\x44\x23\x71\x15\x63\x15\xb9\x6a\x01\x01\x00\x00\xff\xff\xb2\xe7\xd3\xd2\x46\x00\x00\x00")

func typeCustomer_orderGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCustomer_orderGraphql,
		"type/customer_order.graphql",
	)
}

func typeCustomer_orderGraphql() (*asset, error) {
	bytes, err := typeCustomer_orderGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/customer_order.graphql", size: 70, mode: os.FileMode(420), modTime: time.Unix(1592479635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeVendor_orderGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x4b\xcd\x4b\xc9\x2f\xf2\x2f\x4a\x49\x2d\x52\xa8\xe6\xe2\x0c\xcb\xcf\xcf\xcb\xcc\x06\x73\xfd\x4a\x73\x93\x52\x8b\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x38\x9d\x4b\x8b\x4b\xf2\x73\x53\x21\x8a\x3d\x53\xac\x14\x3c\xf3\x4a\x14\xb9\x6a\x01\x01\x00\x00\xff\xff\xa7\x37\x08\xc8\x47\x00\x00\x00")

func typeVendor_orderGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeVendor_orderGraphql,
		"type/vendor_order.graphql",
	)
}

func typeVendor_orderGraphql() (*asset, error) {
	bytes, err := typeVendor_orderGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/vendor_order.graphql", size: 71, mode: os.FileMode(420), modTime: time.Unix(1592479635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"query.graphql": queryGraphql,
	"schema.graphql": schemaGraphql,
	"type/cmt_product.graphql": typeCmt_productGraphql,
	"type/cmt_variant.graphql": typeCmt_variantGraphql,
	"type/customer_order.graphql": typeCustomer_orderGraphql,
	"type/vendor_order.graphql": typeVendor_orderGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"query.graphql": &bintree{queryGraphql, map[string]*bintree{}},
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"cmt_product.graphql": &bintree{typeCmt_productGraphql, map[string]*bintree{}},
		"cmt_variant.graphql": &bintree{typeCmt_variantGraphql, map[string]*bintree{}},
		"customer_order.graphql": &bintree{typeCustomer_orderGraphql, map[string]*bintree{}},
		"vendor_order.graphql": &bintree{typeVendor_orderGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

